package org.hbrs.se1.ws21.uebung2;public class ContainerTest {    public void test() throws ContainerException{        // Now the Container object can be instanced by calling the Container class method get.Instance        Container c = Container.getInstance();        // To create a new Members a new Class need to be created that extends the interface Member        Member m1 = new CreateMember(1);        Member m2 = new CreateMember(20);        Member m3 = new CreateMember(45);        // Test 1: Check if the container is empty        vergleich("The list is empty", 0, c.size());        // Test 2: check if the 3 Members Objects have been added to the container        c.addMember(m1);        c.addMember(m2);        c.addMember(m3);        vergleich("All 3 Members have been added", 3, c.size());        // Test 3: Check if the 3 Member has been removed from the container        c.deleteMember(45);        vergleich("The 3 Member has been removed", 2, c.size());        // Test 4: Check if a Member hasn't been added twice        try {            c.addMember( m2 );        } catch (ContainerException e) {            e.printStackTrace();        } finally {            vergleich ( "Check that the object hasn't been added twice" , 3 , c.size()  );        }    }    private void vergleich( String titel, int must , int is ){        System.out.print( titel + ": \n");        if (must == is ) {            System.out.print("must (" + must + ") = is (" + must + ") --> Test is Succesfull");        } else {            System.out.print("must (" + must + ") != is (" + must + ") --> Test is Unseccesfull");        }        System.out.println("\n");    }    public static void main (String[] args)  {        ContainerTest ct = new ContainerTest();        // if the ContainerException hasn't been thrown the test methode will execute as entended        try {            ct.test();        } catch (ContainerException ce) {            ce.printStackTrace();        }    }}